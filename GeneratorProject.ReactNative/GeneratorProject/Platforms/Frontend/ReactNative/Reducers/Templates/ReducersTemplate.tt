<#@ include file="..\..\Base\Templates\Include.tt" #>
import initialState from './InitialState';
<# 
    if(_api.Actions.AsEnumerable()!= null && _api.Actions.AsEnumerable().Count() > 0)
    {
#>
import {
<#
        foreach(ApiActionInfo action in _api.Actions.AsEnumerable())
        {
            if (action.Id != null && action.Type != null)
            {
#>
    <#=_api.Id.ToUpper()#>_<#=action.Id.ToUpper()#>_REQUEST,
    <#=_api.Id.ToUpper()#>_<#=action.Id.ToUpper()#>_SUCCESS,
    <#=_api.Id.ToUpper()#>_<#=action.Id.ToUpper()#>_FAILURE,
<#
            }
        }
#>
} from '../Actions/<#=_api.Id.ToPascalCase()#>Actions';

export default function <#=_api.Id.ToCamelCase()#>Reducer(state = initialState, action  ) {
    switch (action.type) {
<#
        foreach(ApiActionInfo action in _api.Actions.AsEnumerable())
        {
            if (action.Id != null && action.Type != null)
            {
#>
        case <#=_api.Id.ToUpper()#>_<#=action.Id.ToUpper()#>_REQUEST:
            return action.isLoading;

        case <#=_api.Id.ToUpper()#>_<#=action.Id.ToUpper()#>_SUCCESS:
            return[
                ...state,
                Object.assign({}, action.<#=action.Id.ToCamelCase()#>)
            ];

        case <#=_api.Id.ToUpper()#>_<#=action.Id.ToUpper()#>_FAILURE:
             return [
                ...state,
                Object.assign({}, { isLoading: false }, action.error)
            ];

<#
            }
        }
#>
        default:
            return state;
    }
}
<#
    }
#>