<#@ include file="..\..\Base\Templates\Include.tt"#>
import React, { Component } from 'react';
<#
    if(_layout != null && apiIds.AsEnumerable() != null && apiIds.AsEnumerable().Count() > 0 ){
     string apiId = apiIds.AsEnumerable().FirstOrDefault(); 
#>
import { connect } from 'react-redux';
import { bindActionCreators } from 'redux';
import * as <#=apiId.ToPascalCase()#>Actions from '../../Actions/<#=apiId.ToPascalCase()#>Actions'; 
import { withNavigation } from 'react-navigation';
<#
    }
#>
import  <#=_layout.Id.ToPascalCase()#>Screen  from '../../Screens/<#=_concern.Id.ToPascalCase()#>/<#=_layout.Id.ToPascalCase()#>Screen';
<#
    if(_layout != null)
    {
#>

class <#=_layout.Id.ToPascalCase()#>Container extends Component {

    constructor(props) {
        super(props);
    }

    componentDidMount() {
<#
    foreach(var action in _layout.Actions.AsEnumerable())
    {
        if(action.Type.ToLower().Equals("datalist"))
        {
#>
        this.props.<#=action.Id.ToCamelCase()#>();
<#
        }
    }
#>
    }

<#
    if(_navigationActions != null && _navigationActions.Count() > 0)
    {
        foreach(var action in _layout.Actions.AsEnumerable())
        {
            if(action.Type.ToLower().Equals("navigation"))
            {
                string[] targetSplitted = action.Target.Split('.');
#>
    on<#=action.Id.ToPascalCase()#> = () => {
        this.props.navigation.navigate('<#=targetSplitted[0].ToPascalCase()#><#=targetSplitted[1].ToPascalCase()#>');
    }
<#
            }
        }
    }
#>
    render() {
        if (this.props.hasErrored) {
            return <p>Sorry! There was an error loading the items</p>;
        }

        if (this.props.isLoading) {
            return <p>Loading…</p>;
        }

        return (
            <<#=_layout.Id.ToPascalCase()#>Screen items={this.props.data} 
<#
    if(_navigationActions != null && _navigationActions.Count() > 0)
    {
        foreach(var action in _layout.Actions.AsEnumerable())
        {
            if(action.Type.ToLower().Equals("navigation"))
            {
#>
                on<#=action.Id.ToPascalCase()#>={ this.on<#=action.Id.ToPascalCase()#> }
<#
            }
        }
    }
#>
            />
        );
  }
}

<#
    if(_layout != null && apiIds.AsEnumerable() != null && apiIds.AsEnumerable().Count() > 0 ){
     string apiId = apiIds.AsEnumerable().FirstOrDefault(); 
#>
const mapStateToProps = (state) => {
    return {
        data: state.data,
        hasErrored: state.itemsHasErrored,
        isLoading: state.itemsIsLoading
    };
};

const mapDispatchToProps = (dispatch) => {
    return {
        actions:bindActionCreators(<#=apiId.ToPascalCase()#>Actions, dispatch)
    };
};

export default withNavigation(connect(mapStateToProps, mapDispatchToProps)(<#=_layout.Id.ToPascalCase()#>Container));
<#
        }
        else{
#>
export default <#=_layout.Id.ToPascalCase()#>Container;
<#
        }
    }
#>