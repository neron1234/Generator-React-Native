// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace GeneratorProject.Platforms.Frontend.ReactNative
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using Mobioos.Scaffold.TextTemplating;
    using Mobioos.Scaffold.Generators.Helpers;
    using Mobioos.Foundation.Jade.Models;
    using Mobioos.Foundation.Jade.Extensions;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\01 Working\01 RedFabriq\01 working\generators\react-native\generator\React-Native\GeneratorProject.ReactNative\GeneratorProject\Platforms\Frontend\ReactNative\Apis\Templates\RestApiTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class RestApiTemplate : TemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public override string TransformText()
        {
            
            #line 1 "D:\01 Working\01 RedFabriq\01 working\generators\react-native\generator\React-Native\GeneratorProject.ReactNative\GeneratorProject\Platforms\Frontend\ReactNative\Apis\Templates\RestApiTemplate.tt"
var model = (SmartAppInfo)Model;
            
            #line default
            #line hidden
            this.Write(@"import { create } from 'apisauce';

const BASE_URL = 'https://api.github.com';
const TIMEOUT = 20000; //20 seconds
const TOKEN = ""abc"";

export default class RestApi {
  constructor() {
    const api = create({
      baseURL: BASE_URL,
      headers: { 'Accept': 'application/vnd.github.v3+json', Authorization: TOKEN },
      timeout: TIMEOUT
    });

    api.addAsyncRequestTransform(request => {
      return new Promise(resolve => setTimeout(resolve, TIMEOUT))
    })
  }

  getAll(path) {
    return await api.get(path);
  }

  get(path) {
    return await api.get(path);
  }

  post(path, data) {
    return await api.post(path, data);
  }

  put(path, data) {
    return await api.put(path, data);
  }

  patch(path, data) {
    return await api.patch(path, data);
  }
}");
            return this.GenerationEnvironment.ToString();
        }
    }
    
    #line default
    #line hidden
}
